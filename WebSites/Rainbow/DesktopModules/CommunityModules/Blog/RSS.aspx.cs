using System;
using System.Collections;
using System.Configuration;
using System.Data.SqlClient;
using System.Globalization;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Xml;
using Rainbow.Framework.Content.Data;
using Rainbow.Framework.Settings;
using Rainbow.Framework.Site.Configuration;

namespace Rainbow.Content.Web.Modules
{
    /// <summary>
    /// Author:					Joe Audette
    /// Created:				1/18/2004
    /// Last Modified:			2/7/2004
    /// </summary>
    public partial class RSS : Page
    {
        /// <summary>
        /// Handles the Load event of the Page control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        private void Page_Load(object sender, EventArgs e)
        {
            if (Request.Params.Get("mID") != null)
            {
                try
                {
                    int ModuleID = int.Parse(Request.Params.Get("mID"));
                    RenderRSS(ModuleID);
                }
                catch (Exception ex)
                {
                    RenderError(ex.Message);
                }
            }
            else
            {
                RenderError("Invalid ModuleID");
            }
        }

        /// <summary>
        /// Renders the RSS.
        /// </summary>
        /// <param name="moduleID">The module ID.</param>
        private void RenderRSS(int moduleID)
        {
            /*
			 
			For more info on RSS 2.0
			http://www.feedvalidator.org/docs/rss2.html
			
			Fields not implemented yet:
			<blogChannel:blogRoll>http://radio.weblogs.com/0001015/userland/scriptingNewsLeftLinks.opml</blogChannel:blogRoll>
			<blogChannel:mySubscriptions>http://radio.weblogs.com/0001015/gems/mySubscriptions.opml</blogChannel:mySubscriptions>
			<blogChannel:blink>http://diveintomark.org/</blogChannel:blink>
			<lastBuildDate>Mon, 30 Sep 2002 11:00:00 GMT</lastBuildDate>
			<docs>http://backend.userland.com/rss</docs>
			 
			*/

            Response.ContentType = "text/xml";

            Hashtable moduleSettings = ModuleSettings.GetModuleSettings(moduleID);
            Encoding encoding = new UTF8Encoding();

            XmlTextWriter xmlTextWriter = new XmlTextWriter(Response.OutputStream, encoding);
            xmlTextWriter.Formatting = Formatting.Indented;

            xmlTextWriter.WriteStartDocument();
            xmlTextWriter.WriteComment("RSS generated by Rainbow Portal Blog Module V 1.0 on " +
                                       DateTime.Now.ToLongDateString());
            xmlTextWriter.WriteStartElement("rss");

            xmlTextWriter.WriteStartAttribute("version", "http://rainbowportal.net/blogmodule");
            xmlTextWriter.WriteString("2.0");
            xmlTextWriter.WriteEndAttribute();

            xmlTextWriter.WriteStartElement("channel");
            /*  
				RSS 2.0
				Required elements for channel are title link and description
			*/
            xmlTextWriter.WriteStartElement("title");
            //try
            //{
            //xmlTextWriter.WriteString(moduleSettings["MODULESETTINGS_TITLE_en-US"].ToString());
            //}
            //catch
            //{
            //HACK: Get MODULESETTINGS_TITLE from where?
            xmlTextWriter.WriteString(TitleText(moduleSettings));
            //}
            xmlTextWriter.WriteEndElement();

            xmlTextWriter.WriteStartElement("link");
            xmlTextWriter.WriteString(
                Request.Url.ToString().Replace("DesktopModules/Blog/RSS.aspx", "DesktopDefault.aspx"));
            xmlTextWriter.WriteEndElement();

            xmlTextWriter.WriteStartElement("description");
            xmlTextWriter.WriteString(moduleSettings["Description"].ToString());
            xmlTextWriter.WriteEndElement();

            xmlTextWriter.WriteStartElement("copyright");
            xmlTextWriter.WriteString(moduleSettings["Copyright"].ToString());
            xmlTextWriter.WriteEndElement();

            // begin optional RSS 2.0 fields

            //ttl = time to live in minutes, how long a channel can be cached before refreshing from the source
            xmlTextWriter.WriteStartElement("ttl");
            xmlTextWriter.WriteString(moduleSettings["RSS Cache Time In Minutes"].ToString());
            xmlTextWriter.WriteEndElement();

            xmlTextWriter.WriteStartElement("managingEditor");
            xmlTextWriter.WriteString(moduleSettings["Author Email"].ToString());
            xmlTextWriter.WriteEndElement();

            xmlTextWriter.WriteStartElement("language");
            xmlTextWriter.WriteString(moduleSettings["Language"].ToString());
            xmlTextWriter.WriteEndElement();


            // jes1111 - if(ConfigurationSettings.AppSettings.Get("webMaster") != null)
            if (Config.WebMaster.Length != 0)
            {
                xmlTextWriter.WriteStartElement("webMaster");
                xmlTextWriter.WriteString(ConfigurationManager.AppSettings.Get("webMaster"));
                xmlTextWriter.WriteEndElement();
            }
            xmlTextWriter.WriteStartElement("generator");
            xmlTextWriter.WriteString("Rainbow Portal Blog Module V 1.0");
            xmlTextWriter.WriteEndElement();

            BlogDB blogDB = new BlogDB();
            SqlDataReader dr = blogDB.GetBlogs(moduleID);

            try
            {
                //write channel items
                while (dr.Read())
                {
                    //beginning of blog entry
                    xmlTextWriter.WriteStartElement("item");

                    /*  
					RSS 2.0
					All elements of an item are optional, however at least one of title or description 
					must be present.
					*/

                    xmlTextWriter.WriteStartElement("title");
                    xmlTextWriter.WriteString(dr["Title"].ToString());
                    xmlTextWriter.WriteEndElement();

                    xmlTextWriter.WriteStartElement("link");
                    xmlTextWriter.WriteString(Request.Url.ToString().Replace("RSS.aspx", "blogview.aspx") + "&ItemID=" +
                                              dr["ItemID"].ToString());
                    xmlTextWriter.WriteEndElement();

                    xmlTextWriter.WriteStartElement("pubDate");
                    xmlTextWriter.WriteString(
                        DateTime.Parse(dr["StartDate"].ToString()).ToString("dddd MMMM d yyyy hh:mm:ss tt zzz"));
                    xmlTextWriter.WriteEndElement();

                    xmlTextWriter.WriteStartElement("guid");
                    xmlTextWriter.WriteString(Request.Url.ToString().Replace("RSS.aspx", "blogview.aspx") + "&ItemID=" +
                                              dr["ItemID"].ToString());
                    xmlTextWriter.WriteEndElement();

                    xmlTextWriter.WriteStartElement("comments");
                    xmlTextWriter.WriteString(Request.Url.ToString().Replace("RSS.aspx", "blogview.aspx") + "&ItemID=" +
                                              dr["ItemID"].ToString());
                    xmlTextWriter.WriteEndElement();

                    xmlTextWriter.WriteStartElement("description");
                    xmlTextWriter.WriteCData(Server.HtmlDecode((string) dr["Description"].ToString()));
                    xmlTextWriter.WriteEndElement();


                    //end blog entry
                    xmlTextWriter.WriteEndElement();
                }
            }
            finally
            {
                dr.Close();
            }

            //end of document
            xmlTextWriter.WriteEndElement();
            xmlTextWriter.Close();
        }

        /// <summary>
        /// The module title as it will be displayed on the page. Handles cultures automatically.
        /// </summary>
        /// <param name="moduleSettings">The module settings.</param>
        /// <returns></returns>
        private string TitleText(Hashtable moduleSettings)
        {
            string titleText = "Rainbow Blog";

            if (HttpContext.Current != null) // if it is not design time (and not overriden - Jes1111)
            {
                PortalSettings portalSettings = (PortalSettings) HttpContext.Current.Items["PortalSettings"];
                if (portalSettings.PortalContentLanguage != CultureInfo.InvariantCulture
                    && moduleSettings["MODULESETTINGS_TITLE_" + portalSettings.PortalContentLanguage.Name] != null
                    &&
                    moduleSettings["MODULESETTINGS_TITLE_" + portalSettings.PortalContentLanguage.Name].ToString().
                        Length > 0)
                {
                    titleText =
                        moduleSettings["MODULESETTINGS_TITLE_" + portalSettings.PortalContentLanguage.Name].ToString();
                }
            }
            return titleText;
        }

        /// <summary>
        /// Renders the error.
        /// </summary>
        /// <param name="message">The message.</param>
        private void RenderError(string message)
        {
            Response.Write(message);
            Response.End();
        }

        #region Web Form Designer generated code

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Control.Init"></see> event to initialize the page.
        /// </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        protected override void OnInit(EventArgs e)
        {
            this.Load += new EventHandler(this.Page_Load);
            base.OnInit(e);
        }

        #endregion
    }
}